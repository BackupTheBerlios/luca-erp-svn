Tutorial para Cimarron:
~~~~~~~~~~~~~~~~~~~~~~~

Primeros pasos:
~~~~~~~~~~~~~~~
Empecemos con un Hello World hecho y derecho. La idea es: construimos el View
de afuera hacia adentro, especificando el `parent´ a cada nuevo widget. En
este caso, una ventana y un botón:


    class Main (cimarron.skin.WindowController):
        def __init__ (self):
            super (Main, self).__init__ ()
            self.win.title= 'Main window'
            b= cimarron.skin.Button (
                parent= self.win,
                label= 'Person',
                )


Un WindowController es un Controller que maneja una ventana. Para hacer una
ventana cualquiera, hacemos una subclase, y en el constructor agregamos los
wigets de la ventana. El WindowController ya nos crea una ventana en el
atributo `win´. En este caso, agregamos un Button con un texto que dice
`Person´.

Notamos también que al momento de crear un objeto de Cimarrón, es posible ya
darle todos los valores que hacen falta como argumento por nombre al
constructor. Un detalle a tener en cuenta es que si un nombre de parámetro no
es uno de los nombres esperados por dicho constructor[1], de todas formas ese
valor terminará siendo un atributo del objeto final. Es decir:

>>> a= Button (foo=42)
>>> a.foo
42

En algún otro lado, creamos una aplicación, un objeto de tipo Main con la
aplicación como `parent´ y la lanzamos:


    from papo import cimarron
    cimarron.config ()

    from windows import Main

    app= cimarron.skin.App ()
    w= Main (parent= app)
    w.show ()
    app.run ()


Corremos... voilá! Ventanita con botoncito, muy cheto.

--
[1] o alguno de los contructores arriba en la jerarquía de clases.


Acciones:
~~~~~~~~~
Ahora, que don botón haga algo. Para eso, los controles tiene un atributo
`onAction´, cuyo valor debe ser un callable (en esta caso, un método):


    class Main (cimarron.skin.WindowController):
        def __init__ (self):
            super (Main, self).__init__ ()
            self.win.title= 'Main window'
            b= cimarron.skin.Button (
                parent= self.win,
                label= 'Person',
                onAction= self.doSomething,
                )

        def doSomething (self, *ignore):
            print 'you pressed me!'


Corremos de nuevo... excelente! Cuando apretamos el botón, se llama el método
`doSomething´ con el botón como parámetro. Al botón lo ignoramos y simplemente
imprimimos un texto inútil.


Más ventanas, Entrys y Notebooks:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Agregar más ventanas es un juego de niños. Creamos otra clase, subclase de
WindowControler, y:


    class ABMPerson (cimarron.skin.WindowController):
        def __init__ (self, **kw):
            super (ABMPerson, self).__init__ (**kw)
            self.win.title= 'ABM de Person'
            self.notebook= n= cimarron.skin.Notebook (parent= self.win)

            self.entry= cimarron.skin.Entry ()
            self.entry.label= 'an entry'
            self.entry.parent= self.notebook


Ok, el tema de los notebooks. Para agregar un hijo a un Notebook es necesario
que previamente[2] ese hijo tenga un atributo `label´ (que debe ser un
string[1]). Al agregarlo como hijo, el label se usará para la pestaña.

Ok, tenemos una ventana más. Reemplacemos el mensaje inútil por el código que
levanta esta ventana:


    ...
        def doSomething (self, *ignore):
            w= ABMPerson (parent= self)
            w.show ()


Notar que el `parent´ es la ventana Main y no la aplicación.

Si corremos ahora el ejemplo, podemos tener ambas ventanas abiertas. Si
cerramos la primera, notamos que la aplicación sigue corriendo, y que si
cerramos la segunda a su vez, la aplicación termina. Éstas son dos
caraterísticas de Cimarrón: la aplicación no termina hasta que todas sus
ventanas se hayan cerrado, y las ventanas no son modales una de otra (a pesar
de la jerarquía).

--
[1] en algún momento pordría ser también un Label, pero por ahora no.
[2] Q: se puede hacer mágicamente cuando al hijo se le setea el label?
    A: no. 


Complicándola:
~~~~~~~~~~~~~~
Hasta ahora veníamos haciendo ventanitas sin un propósito específico, o al
menos eso es lo que les queremos hacer creer. Supongamos ahora que queremos
hacer una ventana de edición de un tipo de datos: el tipo Person. Este tipo es
muy simple: representa una persona con nombre, apellido y un conjunto de
direcciones[1]:


    class Person (object):
        def __init__ (self, name='', surname='', addresses= []):
            self.name= name
            self.surname= surname
            self.addresses= addresses

    class Address (object):
        def __init__ (self, text=''):
            self.text= text


Vamos a dividir la edición de los datos del nombre por un lado y las
direcciones por el otro. Para ello, haremos dos Controller's, uno para cada
parte. Veamos cómo operan, al menos en el aspecto teórico.

Un Control (clase de la que heredan Entry, Button y Controller, entre otros)
es un objeto con dos características: tienen un valor y una acción.

El valor se almacena en el atributo `value´, Cada vez que se asigna un valor a
este atributo, el método `refresh()´ es llamado para que el Control tenga la
posibilidad de mostrar el cambio del valor.

La acción ya la hemos visto; no es nada más y nada menos que el atributo
`onAction´. Cada tipo de Control tiene una forma específica de disparar esta
acción: Los Entrys cuando se aprieta <Enter>, los Buttons cuando se los
presiona, etc.

Ahora, los Controllers, como ya dijimos, heredan de Control, y por lo tanto
tienen estas dos caraterísticas. Esto nos permite que podamos usar un
Controller donde se va puede usar un Control. Es responsaboilidad del
(desarrollador del) Controller funcionar con este esquema[2]. La idea es que
así como pusimos un Entry en el notebook, sea posible poner un Controller en
su lugar.

Los Controllers son los que se encargan de armar el View y conectar la
funcionalidad del View al modelo[3]. Veamos qué significa esto en la práctica.

Pensemos en el primero. Vamos a hacer un simple editor de Persons. Este
editor tendrá dos Entrys, uno para el nombre y otro para el apellido. Cuando
al Controller le dén un valor (al que llamamos Model), él deberá actualizar
estos dos Entrys con los datos que correspondan; cuando los datos sean
modificados, deberá modificarlos en el Model. Empecemos con la construcción de
la interfaz:


    class PersonEditPage (cimarron.skin.Controller):
        def __init__ (self, **kw):
            super (PersonEditPage, self).__init__ (**kw)
            h= cimarron.skin.HBox ()
            h.label= 'Edit'
            h.parent= self

            v= cimarron.skin.VBox (parent=h)
            self.name= cimarron.skin.Entry (
                parent= v,
                onAction= self.editModel,
                )
            self.surname= cimarron.skin.Entry (
                parent= v,
                onAction= self.editModel,
                )


Nada complicado: un VBox que hará de contenedor, donde tiramos ambos
Entrys. Las acciones de éstos apuntan a un método que actualiza los valores
en el modelo. Además, crea un modelo nuevo si no lo hay, para tener dónde
guardar esos cambios. Debido a que refresh() (que veremos a continuación) toma
los valores del modelo cuando se lo asignamos a `value´, no podemos hacer algo
de la pinta `self.value= Person()´.  Ahora sí, veamos refresh():


    def refresh (self, *ignore):
        if self.value is not None:
            self.name.value= self.value.name
            self.surname.value= self.value.surname
        else:
            self.name.value= ''
            self.surname.value= ''


y por completitud, editModel():


    def editModel (self, *ignore):
        if self.value is None:
            value= Person ()
            value.name= self.name.value
            value.surname= self.surname.value
            self.value= value
        else:
            self.value.name= self.name.value
            self.value.surname= self.surname.value

--
[1] En realidad es un poco más complicado que esto. Por cada atributo hay un
    `getter´ y un `setter´. Éstos van a ser usados más luego.
[2] No es necesario que esto sea cierto *siempre*.
[3] Es cierto, esto no es estrictamente así siempre. Fíjense que los
    dos Controllers hechos previamente no tiene un modelo asociado.


Delegación:
~~~~~~~~~~~
Los Controles (Button, Entry, el mismo Controller, etc.) tienen un propósito
en su vida, y ése propósito es realizar una determinada acción cuando les es
requerido. Apretás un botón, fiuuum! sale la acción (por ejemplo,
"Cerrar"). Esa conección es directa e inequívoca; si el botón está habilitado,
la acción se realizará -- esa acción puede resultar en una interacción con la
aplicación en donde la acción que el usuario pretende es finalmente cancelada
("No ha guardado los cambios! [Cancelar] [Abortar] [Reintentar]"), pero a
nivel de programación la acción efectivamente fue llavada a cabo.

Distinto es con otros tipos de interacción posible, por ejemplo cerrar una
ventana; en estos casos el resultado esperado es más directo (por ejemplo,
hacer click en la X de la ventana), pero la lógica de si la acción se lleva
efectivamente a cabo o no es bastante más complicada (`puede el usuario cerrar
esta ventana?' `y... siempre y cuando el tipo haya elejido uno de los fleripes
listados... o que estemos cerrando todo... o que explícitamente decida
cancelar la selección de fleripes, etc´). Una forma de manejar esta posible
complejidad es poner toda esa lógica en un método, como hicimos con
onAction(). Sin embargo como es posible que múltiples Controllers estén
interesados en dar su opinión al respecto, una idea que localiza más la toma
de decisión con el responsable de la misma (robada sin ningún tipo de
vergüenza a la gente de NeXT) es el concepto de Delegación.

El proceso de delegación es el siguiente: Cada objeto que delega acciones
tiene una lista de delegados. Por cada acción, se recorre la lista de
delegados preguntándole acerca de qué `opina´ de la acción. Según el conjunto
de respuestas, se hace o no la acción.

Cómo se le pregunta a cada delegado? Los eventos delegan con un nombre (que
típicamente comineza con `will_´, por ejemplo `will_focus_out´), y en cada
delegado es buscado un método con ese nombre. El valor retornado debe ser
alguno de éstos:

* ForcedNo: la acción no se hará y tampoco se le preguntará al resto de
  los delegados.
* No: la opinión es `no, pero preguntale al resto´.
* Unknown: el típico `NS/NC'.
* Yes: la opinión es `por mí si, pero preguntale al resto´.
* ForcedYes: la acción se hará ahora, entendido?

Grids
~~~~~
Los Grids son tablas que sirven para el mostrado y edición de un
conjunto de objetos, y también para la selección de un objeto de un
conjunto. El método de funcionamiento es el siguiente:

El conjunto de datos a mostrar es tomado del atributo `data´. Por otro
lado, se tiene que dar un conjunto de Columns, quienes especifican
cómo a partir de cada objeto a mostrar obtener el valor a mostrar. En
nuestro caso, per ejemplo, podemos querer mostrar en un Grid todos los
Persons, pero sólo el nombre y el apellido. Ahí es donde entran los
getters y setters mencionados anteriormente. A cada objeto a mostrar,
por cada columna, se llama al atributo `read´ de la columna, con el
objeto como parámetro. El valor devuelto por esta llamada es lo que se
muestra en la celda correspondiente. Típicamente, el atributo `read´
será el método getter adecuado sin bindear.

Más concretamente:


    ...
    g= cimarron.skin.Grid (
       parent= ...,
       columns= [
           Column (
               name= 'nombre', 
               read=Person.getName
               ),
           ...
           ]
    ...


Similarmente, el atributo `write´ de un Column tiene que ser un método
que toma dos parámetros: el objeto a modificar y el valor que debe
tomar. Típicamente, el atributo `write´ será el método setter adecuado
sin bindear.


    ...
    g= cimarron.skin.Grid (
       parent= ...,
       columns= [
           Column (
               name= 'nombre', 
               read=Person.getName,
               write=Person.setName
               ),
           ...
           ]
    ...


Si el atributo `write´ no está presente, la columna no es editable.

Los Grids nos permiten recorrer el conjunto de datos con un especie de
cursor de selección. En todo momento, puede haber seleccionado 0 o 1
de los objetos mostrados. Si hay un objeto seleccionado, ése es el
valor del Grid; sino lo hay, el valor es None.

Al presionar <Enter>, se dispara la acción.
