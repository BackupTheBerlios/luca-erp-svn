#!/usr/bin/env python
# -*- python -*- coding: utf-8 -*-
#
# Copyright (c) 2005 Except SRL <dev@except.com.ar>
#
# Developed by Javier Mansilla <javier@except.com.ar>
# Cleaned up slightly by John Lenton <john@except.com.ar>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# ppython is a colorizer for the output of python's unittest framework.  the
# test runner should print "All tests loaded Ok" previous to running the
# tests.

# The code is ugly, but useful.


normal = "[0m"
red = "[0;31;40m"
cyan = "[0;36;40m"
magenta = "[0;35;40m"
blue = "[0;34;40m"
orange = "[0;33;40m"
green = "[0;32;40m"
white = "[0;1;40m"
normal = "[0m"
lred = "[1;31;40m"
lcyan = "[1;36;40m"
lmagenta = "[1;35;40m"
lblue = "[1;34;40m"
lorange = "[1;33;40m"
lgreen = "[1;32;40m"
tred = "[5;31;40m"
tcyan = "[5;36;40m"
tmagenta = "[5;35;40m"
tblue = "[5;34;40m"
torange = "[5;33;40m"
tgreen = "[5;32;40m"

progress_map = {".": lgreen,
                "E": red,
                "F": red}

import sys

readline = sys.stdin.readline
read = sys.stdin.read
write = sys.stdout.write
flush = sys.stdout.flush

while 1:
    line = readline()
    write(line)
    flush()
    if line == "All tests loaded Ok.\n":
        break
    if not line:
        sys.exit()

char = None
while char != '\n':
    char = read(1)
    if char in progress_map:
        write(progress_map[char]+char+normal)
    else:
        write(char)
    flush()

error = False
error_file = None

for lineln in sys.stdin:
    line = lineln.strip('\n')
    if error:
        if error_file is None and line.startswith(' '):
            print lblue+line+normal
            error_file = 'done'
        else:
            if not error_file is None and not line.startswith(' '):
                error = False
                error_file = None
                print orange,
            print '\b'+line+normal         
    else:
        if line.find('ERROR') != -1 or line.find('FAIL') != -1:
            words = line.split(' ')
            print red+words[0]+lred+' '+words[1]+' '+normal+(' '.join(words[2:]))
            error = True
        elif line.find('OK') != -1:
            print lgreen+line+normal
        else:
            print line
